/* SPDX-FileCopyrightText: 2024 Tenkai Raiko
 *
 * SPDX-License-Identifier: Apache-2.0 */

#include "node_math.h"
#include "stdcycles.h"
#include "vector2.h"
#include "vector4.h"

#define vector3 point

/* Define macro flags for code translation. */
#define TRANSLATE_TO_OSL

/* The actual rounded polygon functions are in rounded_polygon_generic.glsl. */
#include "../../../../../source/blender/gpu/shaders/material/rounded_polygon_generic.glsl"

/* Undefine macro flags used for code translation. */
#undef TRANSLATE_TO_OSL

shader node_rounded_polygon_texture(
    int use_mapping = 0,
    matrix mapping = matrix(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    int normalize_r_gon_parameter = 0,
    int elliptical_corners = 0,
    vector3 Vector = P,
    float Scale = 1.0,
    float R_gonSides = 0.0,
    float R_gonRoundness = 5.0,
    output float R_gonField = 0.0,
    output vector3 SegmentCoordinates = vector3(0.0, 0.0, 0.0),
    output float MaxUnitParameter = 0.0,
    output float X_axisToAngleBisectorAngle = 0.0)
{
  /* isconnected() returns 2 when output socket is connected. */
  int calculate_r_gon_parameter_field = int(isconnected(SegmentCoordinates) != 0);
  int calculate_max_unit_parameter = int(isconnected(MaxUnitParameter) != 0);

  vector4 out_variables = calculate_out_fields(calculate_r_gon_parameter_field,
                                               calculate_max_unit_parameter,
                                               normalize_r_gon_parameter,
                                               elliptical_corners,
                                               max(R_gonSides, 2.0),
                                               clamp(R_gonRoundness, 0.0, 1.0),
                                               Scale * vector2(Vector.x, Vector.y));

  R_gonField = out_variables.x;
  SegmentCoordinates = vector3(out_variables.y, out_variables.x - 1.0, 0.0);
  MaxUnitParameter = out_variables.z;
  X_axisToAngleBisectorAngle = out_variables.w;
}
