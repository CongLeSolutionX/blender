/* SPDX-FileCopyrightText: 2024 Blender Foundation
 *
 * SPDX-License-Identifier: Apache-2.0 */

#include "node_hash.h"
#include "stdcycles.h"
#include "vector2.h"
#include "vector4.h"

#define vector3 point

/* Computes a 2D Gabor kernel based on Equation (6) in the original Gabor noise paper. Where the
 * frequency argument is the F_0 parameter and the orientation argument is the w_0 parameter. We
 * assume the Gaussian envelope has a unit magnitude, that is, K = 1. That is because we will
 * eventually normalize the final noise value to the unit range, so the multiplication by the
 * magnitude will be canceled by the normalization. Further, we also assume a unit Gaussian width,
 * that is, a = 1. That is because it does not provide much artistic control. It follows that the
 * Gaussian will be truncated at pi.
 *
 * We also replace the cosine function of the harmonic with a sine function, as suggested by
 * Tavernier's paper in "Section 3.3. Instance stationarity and normalization", to ensure a zero
 * mean, which should help with normalization.
 *
 * Finally, the Gaussian is windowed using a Hann window, that is because contrary to the claim in
 * the original Gabor paper, truncating the Gaussian produces significant artifacts especially when
 * differentiated for bump mapping. The Hann window is C1 continuous and has limited effect on the
 * shape of the Gaussian, so it felt like an appropriate choice. */
float compute_2d_gabor_kernel(vector2 position, float frequency, float orientation)
{
  /* The kernel is windowed beyond the unit distance, so early exist with a zero for points that
   * are further than a unit radius. */
  float distance_squared = dot(position, position);
  if (distance_squared >= 1.0) {
    return 0.0;
  }

  float hann_window = 0.5 + 0.5 * cos(M_PI * distance_squared);
  float gaussian_envelop = exp(-M_PI * distance_squared);
  float windowed_gaussian_envelope = gaussian_envelop * hann_window;

  vector2 frequency_vector = frequency * vector2(cos(orientation), sin(orientation));
  float sinusoidal_wave = sin(2.0 * M_PI * dot(position, frequency_vector));

  return windowed_gaussian_envelope * sinusoidal_wave;
}

/* The original Gabor noise paper specifies that the impulses count for each cell should be
 * computed by sampling a Poisson distribution whose mean is the impulse density. However,
 * Tavernier's paper showed that stratified Poisson point sampling is better assuming the weights
 * are sampled using a Bernoulli distribution, as shown in Figure (3). By stratified sampling, they
 * mean a constant number of impulses per cell, so the stratification is the grid itself in a
 * sense. However, to allow fractional impulses count, an additional impulse is added following a
 * Bernoulli distribution whose probability is the fractional part of the impulses count. */
int compute_impulses_count_for_2d_cell(vector2 cell, float impulses_count)
{
  return int(impulses_count) + (hash_vector2_to_float(cell) < mod(impulses_count, 1.0) ? 1 : 0);
}

/* Computes the Gabor noise value at the given position for the given cell. This is essentially the
 * sum in Equation (8) in the original Gabor noise paper, where we sum Gabor kernels sampled at a
 * random position with a random weight. The orientation of the kernel is constant for anisotropic
 * noise while it is random for isotropic noise. The original Gabor noise paper mentions that the
 * weights should be uniformly distributed in the [-1, 1] range, however, Tavernier's paper showed
 * that using a Bernoulli distribution yields better results, so that is what we do. */
float compute_2d_gabor_noise_cell(vector2 cell,
                                  vector2 position,
                                  float impulses_count,
                                  float frequency,
                                  float isotropy,
                                  float base_orientation)

{
  float noise = 0.0;
  int impulses_count_for_cell = compute_impulses_count_for_2d_cell(cell, impulses_count);
  for (int i = 0; i < impulses_count_for_cell; ++i) {
    /* Compute unique seeds for each of the needed random variables. */
    vector3 seed_for_orientation = vector3(cell.x, cell.y, i * 3);
    vector3 seed_for_kernel_center = vector3(cell.x, cell.y, i * 3 + 1);
    vector3 seed_for_weight = vector3(cell.x, cell.y, i * 3 + 2);

    /* For isotropic noise, add a random orientation amount, while for anisotropic noise, use the
     * base orientation. Linearly interpolate between the two cases using the isotropy factor. */
    float random_orientation = hash_vector3_to_float(seed_for_orientation) * 2.0 * M_PI;
    float orientation = base_orientation + random_orientation * isotropy;

    vector2 kernel_center = hash_vector3_to_vector2(seed_for_kernel_center);
    vector2 position_in_kernel_space = position - kernel_center;

    /* We either add or subtract the Gabor kernel based on a Bernoulli distribution of equal
     * probability. */
    float weight = hash_vector3_to_float(seed_for_weight) < 0.5 ? -1.0 : 1.0;

    noise += weight * compute_2d_gabor_kernel(position_in_kernel_space, frequency, orientation);
  }
  return noise;
}

/* Computes the Gabor noise value by dividing the space into a grid and evaluating the Gabor noise
 * in the space of each cell of the 3x3 cell neighbourhood. */
float compute_2d_gabor_noise(vector2 coordinates,
                             float impulses_count,
                             float frequency,
                             float isotropy,
                             float base_orientation)
{
  vector2 cell_position = floor(coordinates);
  vector2 local_position = coordinates - cell_position;

  float sum = 0.0;
  for (int j = -1; j <= 1; j++) {
    for (int i = -1; i <= 1; i++) {
      vector2 cell_offset = vector2(i, j);
      vector2 current_cell_position = cell_position + cell_offset;
      vector2 position_in_cell_space = local_position - cell_offset;
      sum += compute_2d_gabor_noise_cell(current_cell_position,
                                         position_in_cell_space,
                                         impulses_count,
                                         frequency,
                                         isotropy,
                                         base_orientation);
    }
  }

  return sum;
}

/* Identical to compute_2d_gabor_kernel, except it is evaluated in 3D space. Notice that Equation
 * (6) in the original Gabor noise paper computes the frequency vector using (cos(w_0), sin(w_0)),
 * which we also do in the 2D variant, however, for 3D, the orientation is already a unit frequency
 * vector, so we just need to scale it by the frequency value. */
float compute_3d_gabor_kernel(vector3 position, float frequency, vector3 orientation)
{
  /* The kernel is windowed beyond the unit distance, so early exist with a zero for points that
   * are further than a unit radius. */
  float distance_squared = dot(position, position);
  if (distance_squared >= 1.0) {
    return 0.0;
  }

  float hann_window = 0.5 + 0.5 * cos(M_PI * distance_squared);
  float gaussian_envelop = exp(-M_PI * distance_squared);
  float windowed_gaussian_envelope = gaussian_envelop * hann_window;

  vector3 frequency_vector = frequency * orientation;
  float sinusoidal_wave = sin(2.0 * M_PI * dot(position, frequency_vector));

  return windowed_gaussian_envelope * sinusoidal_wave;
}

/* Identical to compute_impulses_count_for_2d_cell but works on 3D cells. */
int compute_impulses_count_for_3d_cell(vector3 cell, float impulses_count)
{
  return int(impulses_count) + (hash_vector3_to_float(cell) < mod(impulses_count, 1.0) ? 1 : 0);
}

/* Computes the orientation of the Gabor kernel such that it is is constant for anisotropic
 * noise while it is random for isotropic noise. We randomize in spherical coordinates for a
 * uniform distribution. */
vector3 compute_3d_orientation(vector3 orientation, float isotropy, vector4 seed)
{
  /* Return the base orientation in case we are completely anisotropic. */
  if (isotropy == 0.0) {
    return orientation;
  }

  /* Compute the orientation in spherical coordinates. */
  float inclination = acos(orientation.z);
  float azimuth = sign(orientation.y) *
                  acos(orientation.x / length(vector2(orientation.x, orientation.y)));

  /* For isotropic noise, add a random orientation amount, while for anisotropic noise, use the
   * base orientation. Linearly interpolate between the two cases using the isotropy factor. */
  vector2 random_angles = hash_vector4_to_vector2(seed) * 2.0 * M_PI;
  inclination += random_angles.x * isotropy;
  azimuth += random_angles.y * isotropy;

  /* Convert back to Cartesian coordinates, */
  return vector3(
      sin(inclination) * cos(azimuth), sin(inclination) * sin(azimuth), cos(inclination));
}

float compute_3d_gabor_noise_cell(vector3 cell,
                                  vector3 position,
                                  float impulses_count,
                                  float frequency,
                                  float isotropy,
                                  vector3 base_orientation)

{
  float noise = 0.0;
  int impulses_count_for_cell = compute_impulses_count_for_3d_cell(cell, impulses_count);
  for (int i = 0; i < impulses_count_for_cell; ++i) {
    /* Compute unique seeds for each of the needed random variables. */
    vector4 seed_for_orientation = vector4(cell.x, cell.y, cell.z, i * 3);
    vector4 seed_for_kernel_center = vector4(cell.x, cell.y, cell.z, i * 3 + 1);
    vector4 seed_for_weight = vector4(cell.x, cell.y, cell.z, i * 3 + 2);

    vector3 orientation = compute_3d_orientation(base_orientation, isotropy, seed_for_orientation);

    vector3 kernel_center = hash_vector4_to_vector3(seed_for_kernel_center);
    vector3 position_in_kernel_space = position - kernel_center;

    /* We either add or subtract the Gabor kernel based on a Bernoulli distribution of equal
     * probability. */
    float weight = hash_vector4_to_float(seed_for_weight) < 0.5 ? -1.0 : 1.0;

    noise += weight * compute_3d_gabor_kernel(position_in_kernel_space, frequency, orientation);
  }
  return noise;
}

/* Identical to compute_2d_gabor_noise but works in the 3D neighbourhood of the noise. */
float compute_3d_gabor_noise(vector3 coordinates,
                             float impulses_count,
                             float frequency,
                             float isotropy,
                             vector3 base_orientation)
{
  vector3 cell_position = floor(coordinates);
  vector3 local_position = coordinates - cell_position;

  float sum = 0.0;
  for (int k = -1; k <= 1; k++) {
    for (int j = -1; j <= 1; j++) {
      for (int i = -1; i <= 1; i++) {
        vector3 cell_offset = vector3(i, j, k);
        vector3 current_cell_position = cell_position + cell_offset;
        vector3 position_in_cell_space = local_position - cell_offset;
        sum += compute_3d_gabor_noise_cell(current_cell_position,
                                           position_in_cell_space,
                                           impulses_count,
                                           frequency,
                                           isotropy,
                                           base_orientation);
      }
    }
  }

  return sum;
}

shader node_gabor_texture(int use_mapping = 0,
                          matrix mapping = matrix(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
                          string type = "2D",
                          vector3 Vector = P,
                          float Scale = 5.0,
                          float Impulses = 16.0,
                          float Frequency = 2.0,
                          float Anisotropy = 1.0,
                          float Orientation2D = M_PI / 4.0,
                          vector3 Orientation3D = vector3(M_SQRT2, M_SQRT2, 0.0),
                          output float Value = 0.0, )
{
  vector3 coordinates = Vector;
  if (use_mapping) {
    coordinates = transform(mapping, coordinates);
  }

  vector3 scaled_coordinates = coordinates * Scale;
  float isotropy = 1.0 - clamp(Anisotropy, 0.0, 1.0);

  if (type == "2D") {
    Value = compute_2d_gabor_noise(vector2(scaled_coordinates.x, scaled_coordinates.y),
                                   Impulses,
                                   Frequency,
                                   isotropy,
                                   Orientation2D);
  }
  else if (type == "3D") {
    vector3 orientation = normalize(vector(Orientation3D));
    Value = compute_3d_gabor_noise(scaled_coordinates, Impulses, Frequency, isotropy, orientation);
  }
  else {
    error("Unknown dimension!");
  }
}
