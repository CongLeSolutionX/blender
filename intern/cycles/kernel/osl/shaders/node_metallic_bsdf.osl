/* SPDX-FileCopyrightText: 2024 Blender Foundation
 *
 * SPDX-License-Identifier: Apache-2.0 */

#include "node_fresnel.h"
#include "stdcycles.h"

shader node_metallic_bsdf(color BaseColor = 1.0,
                          color EdgeTint = 1.0,
                          vector IOR = vector(0.183, 0.421, 1.373),
                          vector Extinction = vector(3.424, 2.346, 1.770),
                          string distribution = "multi_ggx",
                          string fresnel_type = "physical_conductor",
                          float Roughness = 0.5,
                          float Anisotropy = 0.0,
                          float Rotation = 0.0,
                          normal Normal = N,
                          normal Tangent = 0.0,
                          output closure color BSDF = 0)
{
  float r2 = clamp(Roughness, 0.0, 1.0);
  r2 *= r2;
  float alpha_x = r2, alpha_y = r2;

  /* Handle anisotropy. */
  vector T = Tangent;
  if (Anisotropy > 0.0) {
    float aspect = sqrt(1.0 - clamp(Anisotropy, 0.0, 1.0) * 0.9);
    alpha_x /= aspect;
    alpha_y *= aspect;
    if (Rotation != 0.0)
      T = rotate(T, Rotation * M_2PI, point(0.0, 0.0, 0.0), Normal);
  }

  color F0 = clamp(BaseColor, color(0.0), color(1.0));
  color F82 = clamp(EdgeTint, color(0.0), color(1.0));

  if (fresnel_type == "f82") {
    BSDF = microfacet_f82_tint(distribution, Normal, T, alpha_x, alpha_y, F0, F82);
  }
  else {
    vector n, k;
    if (fresnel_type == "physical_conductor") {
      n = max(IOR, 0.0);
      k = max(Extinction, 0.0);
    }
    else {
      n = conductor_ior_from_color(F0, F82);
      k = conductor_extinction_from_color(F0, n);
    }

    BSDF = conductor_bsdf(Normal, T, alpha_x, alpha_y, n, k, distribution);
  }
}
